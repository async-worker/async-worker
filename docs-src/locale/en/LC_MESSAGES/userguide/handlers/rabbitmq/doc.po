# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Dalton Barreto
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-11 19:05-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.1\n"

#: ../../userguide/handlers/rabbitmq/doc.rst:2
msgid "Parametros adicionais para o decorator app.amqp.consume()"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:4
msgid ""
"Para um handler RabbitMQ o decorator ``@app.amqp.consume()`` pode receber"
" alguns parametros adicionais."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:6
msgid "``queues``: Lista de filas de onde esse handler receberá mensagens"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:7
msgid ""
"``vhost``: Indica em qual vhost as filas estatão definidas. Se não "
"passarmos nada será usado ``vhost=\"/\"``"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:8
msgid ""
"``connection``: Serve para passar manualmente um objeto "
":py:class:`AMQPConnection <asyncworker.connections.AMQPConnection>` para "
"esse handler. Isso é útil quando sua app se conecta a mais de um broker "
"simultaneamente;"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:9
msgid ""
"``options``: É uma instância do objeto "
":py:class:`asyncworker.rabbitmq.AMQPRouteOptions "
"<asyncworker.routes.AMQPRouteOptions>`."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:12
msgid "Exemplo de valores para o campo options"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:16
msgid ""
"O objeto :py:class:`AMQPRouteOptions "
"<asyncworker.routes.AMQPRouteOptions>` pode ter os seguintes atributos:"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:18
msgid ""
"``bulk_size``: Esse valor é um inteiro e diz qual será o tamanho máximo "
"da lista que o handler vai receber, a cada vez que for chamado."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:19
msgid ""
"``bulk_flush_interval``: Inteiro e diz o tempo máximo que o bulk de "
"mensagens poderá ficar com tamanho menor do que ``bulk_size``. Exemplo: "
"Se seu handler tem um bulk_size de 4096 mensagens mas você recebe apenas "
"100 msg/min na fila em alguns momentos seu handler será chamado recebendo"
" uma lista de mensagens **menor** do que 4096."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:20
msgid ""
"``connection_fail_callback``: Função assíncrona que é chamada caso haja "
"uma falha durante a conexão com o broker. Essa função recebe a exceção "
"que ocorreu e o número de retentativas que falharam até então. O número "
"de retentativas é zerado quando o app consegue se conectar com o broker."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:21
msgid ""
"``on_success``: Diz qual será a ação tomada pelo asyncworker quando uma "
"chamada a um handler for concluída com sucesso, ou seja, o handler não "
"lançar nenhuma exception. O Valor padrão é :py:attr:`Actions.ACK "
"<asyncworker.options.Actions.ACK>`"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:22
msgid ""
"``on_exception``: Diz qual será a ação padrão quando a chamada a um "
"handler lançar uma excação não tratada. O valor padrão é "
":py:attr:`Actions.REQUEUE <asyncworker.options.Actions.REQUEUE>`"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:25
msgid "Exemplo de um código que usa essas opções:"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:50
msgid "Consumindo de filas de outros virtualhosts"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:52
msgid ""
"É possível consumir de filas que estão em outros vistualhosts do mesmo "
"broker. Para isso basta passar o parametro ``vhost`` para do decorator "
"``@app.amqp.consume()``. Exemplo:"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:79
msgid "Nesse caso esse handler consome a fila ``queue`` do virtualhost ``logs``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:83
msgid "Consumindo de filas de brokers diferentes"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:85
msgid ""
"É possível consumir, de forma concorrente, de brokers diferentes. Basta "
"que pra isso tenhamos duas conexões distintas e que passemos uma das "
"conexões na hora de regisgtrar nossos handlers. Assim:"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:130
msgid "Uma nota sobre bulk_size e prefetch"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:132
msgid ""
"O valor do ``BULK_SIZE`` sempre é escolhido com a fórmula: "
"``min(BULK_SIZE, PREFRETCH)``. Isso para evitar que o código fique em um "
"deadlock, onde ao mesmo tempo que ele aguarda o bulk encher para poder "
"pegar mais mensagens da fila, ele está aguardando o bulk esvaziar para "
"pegar mais mensagens da fila."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:136
msgid "Flush timeout"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:138
msgid ""
"Com o flush timeout a ``app`` não necessita ficar presa esperando o "
"bucket encher para conseguir processar as mensagens. Após o tempo do "
"``FLUSH_TIMEOUT`` (que são :py:attr:`DefaultValues.BULK_FLUSH_INTERVAL "
"<asyncworker.options.DefaultValues.BULK_FLUSH_INTERVAL>` segundos por "
"default) a ``app`` irá enviar todas as mensagens que já possui para o "
"``_handler``. Por exemplo, se tivermos um ``handler`` que possui:"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:142
msgid "Um ``BULK_SIZE`` de 1.000"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:143
msgid "As mensagens para esse handles são publicadas diariamente"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:144
msgid "E o bucket desse handler ficou com 500 mensagens"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:146
msgid ""
"Nesse caso a ``app`` irá esperar o timeout do flush para liberar essas "
"mensagens para o ``handler``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:148
msgid ""
"Caso queira alterar o tempo default do timeout do flush basta definir env"
" ``ASYNCWORKER_FLUSH_TIMEOUT`` com um número que representará os segundos"
" em que a app irá esperar para realizar o flush."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:150
msgid ""
"Também é possível alterar o tempo do timeout do flush definindo o campo "
"``Options.BULK_FLUSH_INTERVAL`` do dicionário ``options`` passado como "
"parâmetro na criação da rota. O valor passado para o parametro "
"``options`` tem precedência sobre a variável de ambiente "
"``ASYNCWORKER_FLUSH_TIMEOUT``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:156
msgid "Exemplo de um código mais completo"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:186
msgid ""
"Nesse exemplo, o handler ``drain_handler()`` recebe mensagens de ambas as"
" filas: ``asgard/counts`` e ``asgard/counts/errors``, que estão no "
"virtualhost ``fluentd``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:188
msgid ""
"Se o handler lançar alguma exception, a mensagem é automaticamente "
"devolvida para a fila (reject com requeue=True); Se o handler rodar sem "
"erros, a mensagem é automaticamente confirmada (ack)."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:194
msgid "Escolhendo, individualmente, qual ação será dada a cada mensgem recebida"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:196
msgid ""
"Existem situações onde você precisa que algumas as mensagens recebidas "
"pelo handler teham tratamentos **diferentes** das outras mensagens. Ou "
"seja, nem sempre você quer que todas recebam ``ack`` ou ``requeue``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:198
msgid ""
"Para isso o objeto recebido por um handler (:py:class:`RabbitMQMessage "
"<asyncworker.rabbitmq.message.RabbitMQMessage>`) possui alguns métodos:"
msgstr ""

#: asyncworker.rabbitmq.message.RabbitMQMessage.accept:1 of
msgid ""
"Marca essa mensagem para ser confirmada (``ACK``) ao fim da execução do "
"handler."
msgstr ""

#: asyncworker.rabbitmq.message.RabbitMQMessage.reject:1 of
msgid ""
"Marca essa mensagem para ser rejeitada. O parametro ``requeue`` indica se"
" a mensagem será recolocada na fila original (``requeue=True``) ou será "
"descartada (``requeue=False``)."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:205
msgid ""
"Opcionalmente, caso seja necessário rejeitar uma mensagem e ao mesmo "
"tempo **não** devolver essa mensagem pra fila, podemos chamar "
"``message.reject(requeue=False)``. O valor default do ``requeue`` é "
"``True``."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:210
msgid "Sobre AMQPConnection"
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:212
msgid ""
"Esse objeto é o ponto de comunicação principal com um broker RabbitMQ. "
"Aqui temos um método ``put`` onde podemos enviar novas mensagens ao "
"broker."
msgstr ""

#: ../../userguide/handlers/rabbitmq/doc.rst:214
msgid ""
"Essa classe é um modelo pydantic e pode receber alguns parametros no "
"construtor. Esses parametros estão na declaração dessa classe. "
":py:class:`asyncworker.connections.AMQPConnection`."
msgstr ""

#~ msgid ""
#~ "Marca essa mensagem para ser confirmada"
#~ " (``ACK``) ao fim da execução do "
#~ "handler."
#~ msgstr ""

#~ msgid ""
#~ "Marca essa mensagem para ser rejeitada."
#~ " O parametro ``requeue`` indica se a"
#~ " mensagem será recolocada na fila "
#~ "original (``requeue=True``) ou será descartada"
#~ " (``requeue=False``)."
#~ msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-02 13:04-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../userguide/handlers/http/doc.rst:4
msgid "Registrando um novo handler HTTP"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:6
msgid "Todo handler HTTP deve seguir algumas regras:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:8
msgid "Deve sempre ser decorado com :ref:`@app.http.*() <supported-methods>`"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:9
msgid ""
"Deve declarar seus parametros sempre com definição de tipos, pois é assim"
" que o asyncworker saberá passar :ref:`parametros dinâmicos <handler-"
"path-param>` para o handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:10
msgid ""
"Um handler pode não receber nenhum parâmetro. Para isso basta a "
"assinatura do handler ser vazia."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:12
msgid ""
"Alguns objetos já são passados ao handler, caso estejam presentes em sua "
"assinatura.  Eles são:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:14
msgid "Uma instância de :py:class:`asyncworker.http.wrapper.RequestWrapper`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:18
msgid "Métodos HTTP suportados"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:23
msgid ""
"Para definirmos qual método HTTP nosso handler vai responder, devemos "
"usar um dos decorators que estão disponíveis abaixo de ``app.http.*``. "
"Atualmente temos:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:25
msgid "``@app.http.get()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:26
msgid "``@app.http.post()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:27
msgid "``@app.http.put()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:28
msgid "``@app.http.patch()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:29
msgid "``@app.http.delete()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:30
msgid "``@app.http.head()``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:32
msgid ""
"Esses decorators recebem como parametro uma lista de paths que serão "
"respondidos pelo handler decorado. Exemplo:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:51
msgid ""
"Parametros no path podem ser definidos cercando com ``{}``, ex: "
"``/users/{user_id}``. Mais delathes em como receber esses valores em seu "
"handler :ref:`aqui <handler-path-param>`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:55
msgid "Usando métodos não suportados pelo asyncworker"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:57
msgid ""
"Eventualmente você pode precisar registrar um handler que responde por um"
" método HTTP que não possui um decorator específico. Nesse caso você pode"
" usar o decorator ``@app.http._route()`` para regisgtrar esse handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:59
msgid ""
"Mas lembre-se que você está usando uma API interna do asyncworker e que "
"não há garantias de que essa inteface seja mantida estável. O ideal é que"
" o método que você precisa seja adicionado ao projeto."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:61
msgid "Um exemplo de handler que usa um método HTTP qualquer:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:73
msgid "ENVs para escolher a porta e o IP onde o server http estará escutando"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:76
msgid ""
"Por padrão, fazemos o binding em ``127.0.0.1``, porta ``8080``, mas isso "
"pode ser alterado com as envvars ``ASYNCWORKER_HTTP_HOST`` e "
"``ASYNCWORKER_HTTP_PORT``, respectivamente."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:81
msgid "Handlers que são objetos callable"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:85
msgid ""
"É possível também escrever handlers como objetos que são callables, ou "
"seja, possuem o método ``async def __call__()``. Importante notar que a "
"assinatura do método ``__call__()`` segue as mesmas regras da assinatura "
"de uma corotina decorada com o ``@app.route()``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:87
msgid ""
"Esses handlers são especialmente úteis quando você precisa guardar algum "
"tipo de contexto e não quer fazer isso com variáveis globais no nível do "
"módulo."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:89
msgid "Um exemplo de um handler:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:98
msgid ""
"Importante notar que como estamos lidando com um objeto ele precisará ser"
" instanciado antes de ser usado e isso significa que não vamos poder "
"decorá-lo da mesma forma que decoramos handlers que são apenas uma "
"corotina. Um código desse gera erro de sintaxe:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:111
msgid ""
"Por isso esses handlers precisam ser registrados chamando o decorator "
"manualmente, assim:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:127
msgid "Handlers que recebem mais do que apenas Request"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:131
msgid ""
"O asyncworker permite que um handler receba quaisquer prametros. Para "
"isso a assinatura do handler deve conter typehints em todos os "
"parametros. Isso faz com que o asyncworker consiga fazer a resolução "
"desses prametros e consiga chamar o handler corretamente."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:133
msgid ""
"O wrapper que é passado ao handler "
"(:py:class:`asyncworker.http.wrapper.RequestWrapper`) possui um atributo "
"chamado ``types_registry`` que é do tipo "
":py:class:`asyncworker.types.registry.TypesRegistry`. Para que um "
"parametro possa ser passado a um handler ele deve ser adicionado a esse "
"registry."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:135
msgid ""
"Um exemplo de como popular esse registry é através de um decorator "
"aplicado diretamente ao um handler. Vejamos um exemplo:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:165
msgid ""
"Aqui o decorator ``auth_required()`` é responsável por fazer a "
"autenticação, pegando dados do Request e encontrando um usuário válido. "
"Se um usuário não puder ser encontrado, retorna "
"``HTTPStatus.UNAUTHORIZED``. Se um usuário autenticar com sucesso, apenas"
" adiciona o objeto user (que é do tipo ``User``) no registry que está no "
"``RequestWrapper``. Isso é o suficiente para que o handler, quando for "
"chamado, receba diretamente esse user já autenticado."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:168
msgid "Typehints que extraem dados do Request"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:172
msgid ""
"O Asyncworker fornece alguns typehints que são inteligentes o bastante "
"para extrairem dados do request e passar esses dados para o handler sendo"
" chamado."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:174
msgid ""
"Todos os typhints são genéricos e recebem apenas **um** parametro. Os "
"typehitns disponíveis são:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:176
msgid "``PathParam[T]``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:178
msgid ""
"Onde ``T`` é o tipo do dado que será extraído do request. Para usar esses"
" typehints basta anotar os parametros do seu handler com o tipo "
"necessário. Como o seu handler passará a receber um argumento do tipo "
"``PathParam`` (ou qualquer outro typehint inteligente) será necessáio, de"
" alguma forma, extrair o valor real de dentro desse objeto."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:180
msgid ""
"Todos os typehints fornecidos pelo asyncworker possuem o método "
"``unpack()``. Esse  método serve justamente para extrair o valor que foi "
"lido do request."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:182
msgid ""
"Note que esse método é uma corotina. Ser corotina permite que o "
"asyncworker faça \"lazy parsing\" do request. Isso significa que, em "
"alguns casos, o request só será efetivamente lido quando você chamar "
"``await unpack()``. Isso é especialmente útil quando falamos de Request "
"Bodies que são grandes."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:184
msgid ""
"Receber uma instância da classe mencionada na assinatura do handler (em "
"vez de receber diretamente o valor vindo do request) permite que o seu "
"código seja validado estaticamente de forma correta."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:186
msgid ""
"Aqui tem um exemplo simples de como usar o :ref:`PathParam[T] <handler-"
"path-param>`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:189
msgid "Recebendo parâmetros vindos do path do Request"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:194
msgid ""
"É possível receber em seu handler parametros definidos no path da "
"requisição. Isso é feito través do typehint "
":py:class:`asyncworker.http.types.PathParam`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:196
msgid ""
"Quando um handler menciona esse tipo em seus parametros isso faz o "
"asyncworker tentar extrair parametros do path e passar para o handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:198
msgid ""
"Importante notar que, primeiro o asyncworker vai procurar nosso parametro"
" pelo nome e só depois tentará procurar o tipo.  Exemplo:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:209
msgid ""
"Nesse caso, como handler está dizendo que precisa de um parametro chamado"
" ``_id`` temos que declarar um parametro de mesmo nome no path da "
"Request. Depois que esse `match` for feito passaremos o valor recebido no"
" path para o construtor do tipo definido na assinatura do handler, nesse "
"caso ``PathParam``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:211
msgid ""
"Para que seja possível lidar bem com linters (tipo ``mypy``) o que o "
"asyncworker faz é de fato chamar o handler passando uma instância de "
"``PathParam``. Essa intância tem, internamente, o valor real que foi "
"passdo no path do request, já convertido para o tipo correto. Nesse caso "
"aqui um ``int``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:213
msgid ""
"Importante notar que só serão passados ao handler os parametros que estão"
" definidos na assinatura. Então se seu path recebe dois parametros e seu "
"handler só se interessa por um deles, basta declarar na assinatura do "
"handler o parametro que você quer receber."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:215
msgid ""
"Esse typehint pode receber qualquer tipo primitvo do python: ``int``, "
"``float``, ``bool``. Quando recebe ``bool`` valem as regras do `Pydantic "
"<https://pydantic-docs.helpmanual.io/usage/types/#booleans>`_."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Dalton Barreto
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-02 14:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../userguide/handlers/http/index.rst:2
msgid "HTTP"
msgstr ""

#: ../../userguide/handlers/http/index.rst:6
msgid ""
"Aqui mostraremos como escrever um handler que é estimulado através de "
"requisições HTTP."
msgstr ""

#: ../../userguide/handlers/http/index.rst:9
msgid ""
"Um handler é simplesmete uma corotina que recebe um request wrapper "
"(:py:class:`asyncworker.http.wrapper.RequestWrapper`) e retorna uma "
"response (``aiohttp.web.Response``). Essa corotina passa a ser um handler"
" \"asyncworker\" quando é decorada com :ref:`@app.http.*() <supported-"
"methods>`, onde ``app`` é uma instância de ``asyncworker.App``."
msgstr ""

#: ../../userguide/handlers/http/index.rst:11
msgid "Vejamos um handler bem simples que apenas retorna ``HTTP 200 OK``."
msgstr ""

#: ../../userguide/handlers/http/index.rst:28
msgid ""
"O ``RequestWrapper`` tem um atributo ``.http_request`` que é o Request "
"original entregue pelo ``aiohttp``. Podemos fazer o que for preciso para "
"extrair dele as informações que precisarmos. Para mais detalhes, veja a "
"doc do aiohttp: https://docs.aiohttp.org/en/stable/web.html"
msgstr ""


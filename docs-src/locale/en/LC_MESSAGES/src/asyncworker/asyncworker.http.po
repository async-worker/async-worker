# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Dalton Barreto
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-07 17:16-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../src/asyncworker/asyncworker.http.rst:2
msgid "asyncworker.http package"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:5
msgid "Submodules"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:8
msgid "asyncworker.http.decorators module"
msgstr ""

#: asyncworker.http.decorators.parse_path:1 of
msgid ""
"Decorator que permite receber dinamicamente parametros do Request Path "
"Basta que o nome do parametro na assinatura do handler seja igual ao nome"
" do parametro declarado no Path HTTP."
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:16
msgid "asyncworker.http.entrypoints module"
msgstr ""

#: asyncworker.http.entrypoints.HTTPEntryPointImpl:1 of
msgid "Base: :py:class:`asyncworker.entrypoints.EntrypointInterface`"
msgstr ""

#: asyncworker.http.entrypoints.RequestParserAnnotationSpec:1
#: asyncworker.http.wrapper.RequestWrapper:1 of
msgid "Base: :py:class:`object`"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:24
msgid "asyncworker.http.methods module"
msgstr ""

#: asyncworker.http.methods.HTTPMethods:1 of
msgid "Base: :py:class:`asyncworker.options.AutoNameEnum`"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:32
msgid "asyncworker.http.types module"
msgstr ""

#: asyncworker.http.types.BoolModel:1 of
msgid "Base: :py:class:`pydantic.main.BaseModel`"
msgstr ""

#: asyncworker.http.types.PathParam:1 of
msgid ""
"Base: :py:class:`asyncworker.http.types.RequestParser`\\ "
"[:py:obj:`asyncworker.http.types.T`]"
msgstr ""

#: asyncworker.http.types.RequestParser:1 of
msgid "Base: :py:class:`~typing.Generic`\\ [:py:obj:`asyncworker.http.types.T`]"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:40
msgid "asyncworker.http.wrapper module"
msgstr ""

#: ../../src/asyncworker/asyncworker.http.rst:49
msgid "Module contents"
msgstr ""

#~ msgid ""
#~ "Decorator que permite receber dinamicamente"
#~ " parametros do Request Path Basta que"
#~ " o nome do parametro na assinatura"
#~ " do handler seja igual ao nome "
#~ "do parametro declarado no Path HTTP."
#~ msgstr ""

#~ msgid "Base: :class:`asyncworker.entrypoints.EntrypointInterface`"
#~ msgstr ""

#~ msgid "Base: :class:`object`"
#~ msgstr ""

#~ msgid "Base: :class:`asyncworker.options.AutoNameEnum`"
#~ msgstr ""

#~ msgid "An enumeration."
#~ msgstr ""

#~ msgid "Base: :class:`pydantic.main.BaseModel`"
#~ msgstr ""

#~ msgid "Base: :class:`asyncworker.http.types.RequestParser`"
#~ msgstr ""

#~ msgid "Base: :class:`typing.Generic`"
#~ msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Dalton Barreto
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-02 14:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/asyncworker/asyncworker.easyqueue.rst:2
msgid "asyncworker.easyqueue package"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:5
msgid "Submodules"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:8
msgid "asyncworker.easyqueue.connection module"
msgstr ""

#: asyncworker.easyqueue.connection.AMQPConnection:1
#: asyncworker.easyqueue.queue.BaseQueue:1
#: asyncworker.easyqueue.queue.DeliveryModes:1
#: asyncworker.easyqueue.queue.QueueConsumerDelegate:1 of
msgid "Base: :class:`object`"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:16
msgid "asyncworker.easyqueue.exceptions module"
msgstr ""

#: asyncworker.easyqueue.exceptions.EmptyQueueException:1 of
msgid "Base: :class:`Exception`"
msgstr ""

#: asyncworker.easyqueue.exceptions.EmptyQueueException:1 of
msgid "No message to get"
msgstr ""

#: asyncworker.easyqueue.exceptions.InvalidMessageSizeException:1
#: asyncworker.easyqueue.exceptions.UndecodableMessageException:1 of
msgid "Base: :class:`asyncworker.easyqueue.exceptions.MessageError`"
msgstr ""

#: asyncworker.easyqueue.exceptions.MessageError:1 of
msgid "Base: :class:`ValueError`"
msgstr ""

#: asyncworker.easyqueue.exceptions.MessageError:1 of
msgid "Base for all message exceptions"
msgstr ""

#: asyncworker.easyqueue.exceptions.UndecodableMessageException:1 of
msgid "Can't decode as JSON"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:24
msgid "asyncworker.easyqueue.message module"
msgstr ""

#: asyncworker.easyqueue.message.AMQPMessage:1 of
msgid "Base: :class:`typing.Generic`"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:32
msgid "asyncworker.easyqueue.queue module"
msgstr ""

#: asyncworker.easyqueue.queue.BaseJsonQueue:1 of
msgid "Base: :class:`asyncworker.easyqueue.queue.BaseQueue`"
msgstr ""

#: asyncworker.easyqueue.queue.ConnType:1 of
msgid "Base: :class:`enum.Enum`"
msgstr ""

#: asyncworker.easyqueue.queue.ConnType:1 of
msgid "An enumeration."
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue:1 of
msgid ""
"Base: :class:`asyncworker.easyqueue.queue.BaseQueue`, "
":class:`typing.Generic`"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.consume:1 of
msgid ""
"Connects the client if needed and starts queue consumption, sending "
"`on_before_start_consumption` and `on_consumption_start` notifications to"
" the delegate object"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.consume
#: asyncworker.easyqueue.queue.JsonQueue.put
#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_before_start_consumption
#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_message_handle_error
#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_queue_message of
msgid "Par√¢metros"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.consume:5 of
msgid "queue name to consume from"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.consume:6 of
msgid "An optional name to be used as a consumer"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.consume:7 of
msgid ""
"identifier. If one isn't provided, a random one is generated by the "
"broker :return: The consumer tag. Useful for cancelling/stopping "
"consumption"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.put:1 of
msgid "A serializable data that should be serialized before"
msgstr ""

#: asyncworker.easyqueue.queue.JsonQueue.put:2 of
msgid ""
"publishing :param serialized_data: A payload to be published as is :param"
" exchange: The exchange to publish the message :param routing_key: The "
"routing key to publish the message"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_before_start_consumption:1
#: of
msgid ""
"Coroutine called before queue consumption starts. May be overwritten to "
"implement further custom initialization."
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_before_start_consumption:4
#: of
msgid "Queue name that will be consumed"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_before_start_consumption:6
#: of
msgid "AsynQueue instanced"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_connection_error:1 of
msgid "Called when the connection fails"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_consumption_start:1 of
msgid "Coroutine called once consumption started."
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_message_handle_error:1
#: of
msgid ""
"Callback called when an uncaught exception was raised during message "
"handling stage."
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_message_handle_error:4
#: of
msgid "The exception that triggered"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_message_handle_error:5
#: of
msgid "arguments used to call the coroutine that handled"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_message_handle_error:6
#: of
msgid "the message :return:"
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_queue_message:1 of
msgid ""
"Callback called every time that a new, valid and deserialized message is "
"ready to be handled."
msgstr ""

#: asyncworker.easyqueue.queue.QueueConsumerDelegate.on_queue_message:4 of
msgid "the consumed message"
msgstr ""

#: ../../src/asyncworker/asyncworker.easyqueue.rst:41
msgid "Module contents"
msgstr ""


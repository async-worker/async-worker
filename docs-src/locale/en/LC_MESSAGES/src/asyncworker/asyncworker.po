# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Dalton Barreto
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-02 14:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/asyncworker/asyncworker.rst:2
msgid "asyncworker package"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:5
msgid "Subpackages"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:19
msgid "Submodules"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:22
msgid "asyncworker.app module"
msgstr ""

#: asyncworker.app.App:1 of
msgid ""
"Base: :class:`collections.abc.MutableMapping`, "
":class:`asyncworker.signals.base.Freezable`"
msgstr ""

#: asyncworker.app.App.run_every:1 of
msgid "Registers a coroutine to be called with a given interval"
msgstr ""

#: asyncworker.app.App.run_on_shutdown:1 of
msgid "Registers a coroutine to be awaited for during app shutdown"
msgstr ""

#: asyncworker.app.App.run_on_startup:1 of
msgid "Registers a coroutine to be awaited for during app startup"
msgstr ""

#: asyncworker.app.App.shutdown:1 of
msgid "Schedules an on_startup signal"
msgstr ""

#: asyncworker.app.App.shutdown:3 of
msgid "Is called automatically when the application receives a SIGINT or SIGTERM"
msgstr ""

#: asyncworker.app.App.startup:1 of
msgid "Causes on_startup signal"
msgstr ""

#: asyncworker.app.App.startup:3 of
msgid "Should be called in the event loop along with the request handler."
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:30
msgid "asyncworker.bucket module"
msgstr ""

#: asyncworker.bucket.Bucket:1 of
msgid "Base: :class:`typing.Generic`"
msgstr ""

#: asyncworker.bucket.BucketFullException:1 of
msgid "Base: :class:`Exception`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:38
msgid "asyncworker.conf module"
msgstr ""

#: asyncworker.conf.Settings:1 of
msgid "Base: :class:`pydantic.env_settings.BaseSettings`"
msgstr ""

#: asyncworker.conf.Settings.Config:1
#: asyncworker.connections.AMQPConnection.Config:1
#: asyncworker.options.DefaultValues:1
#: asyncworker.routes.AMQPRouteOptions.Config:1
#: asyncworker.task_runners.ScheduledTaskRunner:1 asyncworker.utils.Timeit:1 of
msgid "Base: :class:`object`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:46
msgid "asyncworker.connections module"
msgstr ""

#: asyncworker.connections.AMQPConnection:1 of
msgid "Base: :class:`asyncworker.connections.Connection`"
msgstr ""

#: asyncworker.connections.AMQPConnection.register:1 of
msgid "Register a virtual subclass of an ABC."
msgstr ""

#: asyncworker.connections.AMQPConnection.register:3 of
msgid "Returns the subclass, to allow usage as a class decorator."
msgstr ""

#: asyncworker.connections.Connection:1 asyncworker.routes.Model:1 of
msgid "Base: :class:`pydantic.main.BaseModel`, :class:`abc.ABC`"
msgstr ""

#: asyncworker.connections.Connection:1 of
msgid ""
"Common ancestral for all Connection classes that auto generates a "
"connection name and is responsible for keeping track of new connections "
"on the ConnectionsMapping"
msgstr ""

#: asyncworker.connections.ConnectionsMapping:1 of
msgid ""
"Base: :class:`collections.abc.Mapping`, :class:`typing.Generic`, "
":class:`asyncworker.signals.base.Freezable`"
msgstr ""

#: asyncworker.connections.ConnectionsMapping:1 of
msgid ""
"A mapping (Connection.name->Connection) of all available connections that"
" also keeps a counter for each connection type"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:54
msgid "asyncworker.consumer module"
msgstr ""

#: asyncworker.consumer.Consumer:1 of
msgid "Base: :class:`asyncworker.easyqueue.queue.QueueConsumerDelegate`"
msgstr ""

#: asyncworker.consumer.Consumer.on_before_start_consumption:1 of
msgid ""
"Coroutine called before queue consumption starts. May be overwritten to "
"implement further custom initialization."
msgstr ""

#: asyncworker.consumer.Consumer.on_before_start_consumption
#: asyncworker.consumer.Consumer.on_message_handle_error
#: asyncworker.consumer.Consumer.on_queue_error of
msgid "Parâmetros"
msgstr ""

#: asyncworker.consumer.Consumer.on_before_start_consumption:4 of
msgid "Queue name that will be consumed"
msgstr ""

#: asyncworker.consumer.Consumer.on_before_start_consumption:6 of
msgid "AsynQueue instanced"
msgstr ""

#: asyncworker.consumer.Consumer.on_connection_error:1 of
msgid "Called when the connection fails"
msgstr ""

#: asyncworker.consumer.Consumer.on_consumption_start:1 of
msgid "Coroutine called once consumption started."
msgstr ""

#: asyncworker.consumer.Consumer.on_message_handle_error:1 of
msgid ""
"Callback called when an uncaught exception was raised during message "
"handling stage."
msgstr ""

#: asyncworker.consumer.Consumer.on_message_handle_error:4 of
msgid "The exception that triggered"
msgstr ""

#: asyncworker.consumer.Consumer.on_message_handle_error:5 of
msgid "arguments used to call the coroutine that handled"
msgstr ""

#: asyncworker.consumer.Consumer.on_message_handle_error:6 of
msgid "the message"
msgstr ""

#: asyncworker.consumer.Consumer.on_queue_error:1 of
msgid ""
"Callback called every time that an error occurred during the validation "
"or deserialization stage."
msgstr ""

#: asyncworker.consumer.Consumer.on_queue_error:4 of
msgid "unparsed, raw message content"
msgstr ""

#: asyncworker.consumer.Consumer.on_queue_error:6 of
msgid "delivery_tag of the consumed message"
msgstr ""

#: asyncworker.consumer.Consumer.on_queue_error:8 of
msgid "THe error that caused the callback to be called"
msgstr ""

#: asyncworker.consumer.Consumer.on_queue_message:1 of
msgid ""
"Callback called every time that a new, valid and deserialized message is "
"ready to be handled."
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:62
msgid "asyncworker.decorators module"
msgstr ""

#: asyncworker.decorators.wraps:1 of
msgid ""
"Esse decorator faz com que a assinatura da função original \"suba\" até o"
" último decorator, que deverá ser sempre um registrador do próprio "
"asyncworker. ex: @app.http.get(...) @deco1 @deco2 async def handler(...)"
msgstr ""

#: asyncworker.decorators.wraps:8 of
msgid "pass"
msgstr ""

#: asyncworker.decorators.wraps:10 of
msgid ""
"Nesse caso, os decorators `@deco1` e `@deco2` devem, *necessariamente* "
"fazer uso desse `@wraps()`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:70
msgid "asyncworker.entrypoints module"
msgstr ""

#: asyncworker.entrypoints.EntrypointInterface:1 of
msgid "Base: :class:`abc.ABC`, :class:`typing.Generic`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:78
msgid "asyncworker.exceptions module"
msgstr ""

#: asyncworker.exceptions.InvalidConnection:1
#: asyncworker.exceptions.InvalidRoute:1 of
msgid "Base: :class:`ValueError`"
msgstr ""

#: asyncworker.exceptions.InvalidConnection:1 of
msgid "Defines an invalid connection definition condition."
msgstr ""

#: asyncworker.exceptions.InvalidRoute:1 of
msgid "Defines an invalid route definition condition."
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:86
msgid "asyncworker.options module"
msgstr ""

#: asyncworker.options.Actions:1 asyncworker.options.Events:1
#: asyncworker.options.Options:1 asyncworker.options.RouteTypes:1 of
msgid "Base: :class:`asyncworker.options.AutoNameEnum`"
msgstr ""

#: asyncworker.options.Actions:1 asyncworker.options.AutoNameEnum:1
#: asyncworker.options.Events:1 asyncworker.options.Options:1
#: asyncworker.options.RouteTypes:1 of
msgid "An enumeration."
msgstr ""

#: asyncworker.options.AutoNameEnum:1 of
msgid "Base: :class:`str`, :class:`enum.Enum`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:94
msgid "asyncworker.routes module"
msgstr ""

#: asyncworker.routes.AMQPRoute:1 asyncworker.routes.HTTPRoute:1 of
msgid "Base: :class:`asyncworker.routes.Route`"
msgstr ""

#: asyncworker.routes.AMQPRouteOptions:1 of
msgid "Base: :class:`asyncworker.routes._RouteOptions`"
msgstr ""

#: asyncworker.routes.Model:1 of
msgid "An abstract pydantic BaseModel that also behaves like a Mapping"
msgstr ""

#: asyncworker.routes.Route:1 of
msgid "Base: :class:`asyncworker.routes.Model`, :class:`abc.ABC`"
msgstr ""

#: asyncworker.routes.Route:1 of
msgid "An abstract Model that acts like a route factory"
msgstr ""

#: asyncworker.routes.RoutesRegistry:1 of
msgid "Base: :class:`collections.UserDict`"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:102
msgid "asyncworker.task\\_runners module"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:110
msgid "asyncworker.time module"
msgstr ""

#: asyncworker.time.ClockTicker:1 of
msgid "Base: :class:`collections.abc.AsyncIterator`"
msgstr ""

#: asyncworker.time.ClockTicker:1 of
msgid ""
"T - A clock tick F - Something that happens inside an iteration (\"x\" = "
"running \"-\" = waiting) I - A clock iteration"
msgstr ""

#: asyncworker.time.ClockTicker:5 of
msgid "E.g:"
msgstr ""

#: asyncworker.time.ClockTicker:9 of
msgid "async for tick in Clock(seconds=2):"
msgstr ""

#: asyncworker.time.ClockTicker:8 of
msgid "await asyncio.sleep(3)"
msgstr ""

#: asyncworker.time.ClockTicker:11 of
msgid ""
"T: 15------17------19------21------23------25------27------29------ F: "
"xxxxxxxxxxxxx---xxxxxxxxxxxxx---xxxxxxxxxxxxx---xxxxxxxxxxxxx--- I: x"
"---------------x---------------x---------------x---------------"
msgstr ""

#: asyncworker.time.perf_counter_ms:1 of
msgid ""
"Return the value (in fractional milliseconds) of a performance counter, "
"i.e. a clock with the highest available resolution to measure a short "
"duration. It does include time elapsed during sleep and is system-wide. "
"The reference point of the returned value is undefined, so that only the "
"difference between the results of consecutive calls is valid."
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:118
msgid "asyncworker.utils module"
msgstr ""

#: ../../src/asyncworker/asyncworker.rst:127
msgid "Module contents"
msgstr ""

